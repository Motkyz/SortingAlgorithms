using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SortingAlgorithms
{
    public class Description
    {
        private static readonly string _bubble = "Как работает пузырьковая сортировка.\r\n" +
                "1. Последовательно сравниваются значения соседних элементов.\r\n" +
                "2. Если предыдущее больше последующего, то производится обмен.\r\n" +
                "3. Таким образом наибольший элемент оказывается в конце списка.\r\n" +
                "4. Сортировка продолжается с начала списка, но уже не включая последний элемент, и так, пока массив не будет отсортирован.";
        private static readonly string _select = "Как работает сортировка выбором.\r\n" +
                "1. Находится номер минимального значения в неотсортированной части массива.\r\n" +
                "2. Производится обмен этого значения со значением первой неотсортированной позиции (обмен не нужен, если минимальный элемент уже находится на данной позиции).\r\n" +
                "3. Продолжается сортировка оставшегося списка, исключив из рассмотрения ещё один элемент. ";
        private static readonly string _heap = "Как работает пирамидальная сортировка.\r\n" +
            "Она использует структуру данных, называемую кучей, " +
            "которая по сути является бинарным деревом с некоторыми особыми свойствами.\r\n" +
            "Алгоритм сортировки кучи состоит из двух фаз:\r\n" +
            "1. Фаза heapify (создания кучи): на этой фазе мы преобразуем входной массив в максимальную кучу — двоичное дерево, " +
            "в котором значение каждого узла больше или равно значению его дочерних узлов. " +
            "Это можно сделать, начав с последнего нелистового узла в дереве и двигаясь назад к корню, гарантируя, " +
            "что каждый узел удовлетворяет свойству максимальной кучи.\r\n" +
            "2. Фаза сортировки: На этой фазе максимальная куча многократно удаляется, пока не останется только один элемент. " +
            "Это делается путем замены корневого узла на последний элемент в куче, а затем обеспечения того, " +
            "чтобы новый корневой узел удовлетворял свойству максимальной кучи. Этот процесс повторяется, пока в куче не останется только один элемент.";
        private static readonly string _quick = "Как работает быстрая сортировка.\r\n" +
            "1. Выбирается опорный элемент из массива. " +
            "Чаще всего это средний элемент, но также можно выбрать «опору» случайным образом. " +
            "Проще всего — просто выбрать первый или последний элемент.\r\n" +
            "2. Массив делится на две части таким образом, что элементы, которые меньше опорного, перемещаются влево от него, а те, которые больше или равны ему — вправо.\r\n" +
            "3. Процесс повторяется рекурсивно для левой и правой части массива до тех пор, пока каждая часть не будет состоять из одного элемента.";
        private static readonly string _direct = "Внешнее прямое слияние — это метод сортировки данных, которые расположены на внешних устройствах и не вмещаются в оперативную память.\n" +
            "Алгоритм прямого слияния:\n" +
            "1. Последовательность А разбивается на две половины В и С.\n" +
            "2. Части В и С сливаются, при этом одиночные элементы из В и С образуют упорядоченные пары.\n" +
            "3. Полученная последовательность А вновь обрабатывается, как указано в двух предыдущих шагах, но сливаются упорядоченные пары. " +
            "Теперь упорядоченные пары переходят в упорядоченные четверки.\n" +
            "4. Повторяя предыдущие шаги, сливают четверки в восьмёрки и т.д., пока не будет упорядочена вся последовательность.";
        private static readonly string _natural = "Внешнее естественное слияние — это метод сортировки данных, " +
            "расположенных на внешних устройствах и не вмещающихся в оперативную память. \n" +
            "Алгоритм сортировки естественным слиянием:\n" +
            "1. Исходный файл разбивается на два вспомогательных файла. Поочерёдно считываются записи исходной последовательности (неупорядоченной). " +
            "Если значения ключей соседних записей удовлетворяют условию, то они записываются в первый вспомогательный файл. " +
            "Как только встречаются противоположные значения, то записи копируются во второй вспомогательный файл. " +
            "Процедура повторяется до тех пор, пока все записи исходной последовательности не будут распределены по файлам.\n" +
            "2. Вспомогательные файлы сливаются в исходный файл, при этом серии образуют упорядоченные последовательности.\n" +
            "3. Полученный файл вновь обрабатывается, как указано в шагах 1 и 2.\n" +
            "4. Повторяя шаги, сливают упорядоченные серии до тех пор, пока не будет упорядочен целиком весь файл.";
        private static readonly string _multi = "Многопутевое слияние — это метод сортировки, при котором данные разбиваются на " +
            "несколько файлов (так называемые «пути»), сортируются отдельно, а затем объединяются в один отсортированный файл через " +
            "многократное слияние.\n" +
            "Алгоритм:\n" +
            "1. Разделить входные данные на несколько отсортированных подфайлов (путей).\n" +
            "2. Произвести их многопутевое слияние, объединяя по одному элементу из каждого подфайла в итоговый файл.\n" +
            "3. Повторять процесс до тех пор, пока все подфайлы не будут объединены в один. ";

        public static string GetDesc(string sortName)
        {
            return sortName switch
            {
                "Bubble Sort" => _bubble,
                "Select Sort" => _select,
                "Heap Sort" => _heap,
                "Quick Sort" => _quick,
                "Прямое слияние" => _direct,
                "Естественное слияние" => _natural,
                "Многопутевое слияние" => _multi
            };
        }
    }
}
